# -*- coding: utf-8 -*-
"""CrediCard_Fraud.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bX_9KOVBFHe53fbx7-l9iV66mQRN3xPR
"""

import numpy as np
import pandas as pd
import sklearn
import scipy
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,accuracy_score
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.svm import OneClassSVM
from pylab import rcParams
rcParams['figure.figsize'] = 14, 8
RANDOM_SEED = 42
LABELS = ["Normal", "Fraud"]

data = pd.read_csv("creditcard.csv", sep=',')
data.head()

data.info()

"""**Exploratory Analysis**"""

data.isnull().values.any()

count_classes = pd.value_counts(data['Class'], sort=True)
print(count_classes)
count_classes.plot(kind='bar', rot=0)

fraud= data[data['Class']==1]
print(fraud.to_string)
normal = data[data['Class']==0]
print (normal.to_string)

print (fraud.shape, normal.shape)

fraud.Amount.describe()

normal.Amount.describe()

f, (ax1,ax2) = plt.subplots(2,1,sharex=True)
f.suptitle ('Amount per transaction by class')
bins=50
ax1.hist(fraud.Amount, bins = bins)
ax1.set_title('Fraud')
ax2.hist(normal.Amount, bins = bins)
ax2.set_title('Normal')
plt.xlabel('Amount ($)')
plt.ylabel('Number of Transactions')
plt.xlim((0, 20000))
plt.yscale('log')
#plt.show()

f, (ax1,ax2) = plt.subplots(2,1,sharex=True)
f.suptitle('Time of Transaction  Vs. Amount by Class')
ax1.scatter(fraud.Time,fraud.Amount)
ax1.set_title('Fraud')
ax2.scatter(normal.Time, normal.Amount)
ax2.set_title('Normal')
plt.xlabel('Time (in Seconds)')
plt.ylabel('Amount')
#plt.show()

data1 = data.sample(frac =0.1, random_state=1)
data1.shape
data.shape


## sample the data 
dat1 = data.sample(frac=0.1, random_state=1)
data1.head
data1.shape

Fraud = data1[data1['Class']==1]
Valid = data1[data1['Class']==0]
outlier_fraction = len(Fraud)/float(len(Valid))

print("outlier_fraction : {}" , outlier_fraction)

print("Fraud Cases : {}".format(len(Fraud)))

print("Valid Cases : {}".format(len(Valid)))

## SEE THE HEAT MAP for correlation
import seaborn as sns
cormat= data1.corr()
top_corr_features= cormat.index
plt.figure(figsize=(20,20))
g= sns.heatmap(data[top_corr_features].corr(), annot=True, cmap="RdYlGn")
#plt.show()

#Create independent and Dependent Features
columns = data1.columns.tolist()
# Filter the columns to remove data we do not want 
columns = [c for c in columns if c not in ["Class"]]
# Store the variable we are predicting 
target = "Class"
# Define a random state 
state = np.random.RandomState(42)
X = data1[columns]
Y = data1[target]
X_outliers = state.uniform(low=0, high=1, size=(X.shape[0], X.shape[1]))
# Print the shapes of X & Y
print(X.shape)
print(Y.shape)
print(X_outliers.shape)

##define outlier classifiers

classifiers = {

    "Isolation Forest" : IsolationForest(n_estimators=100, max_samples=len(X), contamination=outlier_fraction,random_state=state, verbose=1),
    #"Local Outlier Factor" :LocalOutlierFactor(n_neighbors=20,algorithm='auto',leaf_size=30,metric="minkowski",p=2,metric_params=None, contamination=outlier_fraction),
    #"Support Vector Machine" : OneClassSVM(kernel='rbf',degree=3, gamma=0.1,nu=0.05, max_iter=-1)

}

print(classifiers)

for i, (clf_name, clf) in enumerate(classifiers.items()) :
    if clf_name == "Local Outlier Factor":
        y_pred = clf.fit_predict(X)
        scores_prediction=clf.negative_outlier_factor_
    elif clf_name == "Support Vector Machine":
        clf.fit(X)
        y_pred = clf.predict(X)
    else:
        clf.fit(X)
        scores_prediction = clf.decision_function(X)
        y_pred = clf.predict(X)

    print ("y_prod: {}", y_pred)
 #Reshape the prediction values to 0 for Valid transactions , 1 for Fraud transactions
    y_pred[y_pred == 1] = 0
    y_pred[y_pred == -1] = 1
    n_errors = (y_pred != Y).sum()
    # Run Classification Metrics
    print("{}: {}".format(clf_name,n_errors))
    print("Accuracy Score :")
    print(accuracy_score(Y,y_pred))
    print("Classification Report :")
    print(classification_report(Y,y_pred))